# some more ls aliases
alias ll='ls -lh'
alias la='ls -a'
alias lla='ll -a'

alias cd..='cd ..'
alias cd...='cd ../..'
alias cd....='cd ../../..'
alias cd.....='cd ../../../..'

# get the PID(s) of commands matching the query (found w/ ps)
#get_pid() { ps axf | grep "$*" | grep -v grep | awk '{print $1}'; }
alias psgrep="ps ux -U $USER | grep -v grep | grep"
alias psgrepa="ps aux | grep -v grep | grep"
pidgrep() { psgrep "$*" | awk '{print $2}'; }
pidgrepa() { psgrepa "$*" | awk '{print $2}'; }

# use git diff instead of std diff if possible
which git 2>&1 > /dev/null && alias diff="git diff --no-index"

# add util to refresh git development branch
git-refreshdev() {
  local deps="$(git branch --merged=develop | grep -v "develop\|master" | xargs)"
  if [ -z "$var" ]; then
    echo "git co develop && git branch -d $deps && git fetch --prune && git merge origin/develop"
  else
    echo "git co develop && git fetch --prune && git merge origin/develop"
  fi
}
git-refreshmaster() {
  local deps="$(git branch --merged=master | grep -v "develop\|master" | xargs)"
  if [ -z "$var" ]; then
    echo "git co master && git branch -d $deps && git fetch --prune && git merge origin/master"
  else
    echo "git co master && git fetch --prune && git merge origin/master"
  fi
}

#
# fixes for annoying ubuntu problems
#
# restart network manager in case of wifi problems after suspend
alias restart-network-manager="sudo service network-manager restart"

# try to list old linux images to free stpace in /boot (ubuntu issue)
purge_linux_images() {
  printf "avaliable images:\n%s\n" "$(dpkg -l | grep linux-image)"
  printf "\ncleanup using:\n"
  for img in $(dpkg -l | grep linux-image | awk '$1=$1' | cut -d' ' -f2 | grep -v extra | sort | head -n-2); do
    printf "sudo apt-get purge %s; " "${img}";
  done
  printf "\n"
}
alias trim_boot="purge_linux_images"

#
# ssh shortcuts
#
# open ssh session and start tmux remotely
sshtmux() {
  if [ -z "$1" ]; then
    >&2 echo "SSH host missing!"
    return 1
  fi
  if [ -n "$2" ]; then
    if [ "ls" == "$2" ]; then
      ssh -t $1 "tmux ls"
    elif [ "lsopts" == "$2" ]; then
      # internal command to provide autocompletion
      ssh -t $1 "tmux ls" 2> /dev/null | awk -F":" 'BEGIN{printf "ls"}{printf " "$1}'
    else
      # debug:
      #echo ssh -t $1 "tmux attach -d -t ${@:2} || tmux new -s ${@:2}"
      ssh -t $1 "tmux attach -d -t ${@:2}  2> /dev/null || tmux new -s ${@:2}"
    fi
  else
    ssh -t $1 'tmux attach -d  2> /dev/null || tmux new'
  fi
}

# define an alias for each host in the ~/.ssh/config
if [ -f "$HOME/.ssh/config" ] ; then
  # handle placeholder entries remove placeholder
  eval $(awk '($1=="Host" && index($1, ".*") > 0) {print "alias " $2 "=\47sshtmux " $2 "\47;" }' $HOME/.ssh/config)
  #TODO enable auto completion for this alias (continue sshtmux sessions)
  #eval $(awk '$1=="Host" {print "_" $2 "() { local cur opts; cur=\"${COMP_WORDS[COMP_CWORD]}\";opts=\"$(" $2 " lsopts)\";COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}) ); return 0; }; complete -F _" $2 " " $2 "; " }' $HOME/.ssh/config)
fi

# calculate a server port number (5____) given a host name (param $1)
function server_port { printf "5%-4s%s\n" "$(echo $((0x$(echo -n $1 | md5sum | cut -f1 -d' ' | cut -c-5))) | cut -c2-5)" | tr ' ' '0'; }

# create an entry for the tunneled connection to a server in .ssh/config
# --> read the config, change hostname ($1) to "__host" HostName to "127.0.0.1" port to ```server_port $1``` and write the entry
add_tunneled_host() {
  local orig_host=$1
  local start_line=""
  local end_line=""
  local config_file="$HOME/.ssh/config"
  if [ ! -f "${config_file}" ] ; then
    >&2 echo "Error: SSH config ${config_file} not found"'!'
    return 1
  fi
  for hostline in $(grep -n '^Host[[:space:]]*' $config_file | sed 's/Host[[:space:]]*//'); do
    local host="$(echo $hostline | cut -f2 -d':')"
    if [[ "__${orig_host}" == "$host" ]]; then
      >&2 echo "Error: Tunneled host already exists"'!'
      return 1
    elif [[ "$orig_host" == "$host" ]]; then
      start_line="$(echo $hostline | cut -f1 -d':')"
      end_line=""
    elif [[ -n "$start_line" && -z "$end_line" ]]; then
      end_line="$(echo $hostline | cut -f1 -d':')"
    fi
  done
  if [[ -z "$start_line" && -z "$end_line" ]]; then
    >&2 echo "Error: No config for ${orig_host} found"'!'
    return 1
  fi
  echo "Creating tunneled host based on: $orig_host (line ${start_line} -- ${end_line} in ${config_file})"
  echo "" >> $config_file
  echo "Host __${orig_host}" >> $config_file
  echo "    HostName 127.0.0.1" >> $config_file
  echo "    Port $(server_port ${orig_host})" >> $config_file
  head "-$(echo "$end_line-1" | bc)" $config_file | tail "-$(echo "$end_line-$start_line" | bc)" | grep -v "^Host[[:space:]]*\|^[[:space:]]*HostName[[:space:]]*\|^[[:space:]]*Port[[:space:]]*" >> $config_file
}

# open or close a tunnel to a specific remote host
tunnel_host() {
  if [ "$#" -lt "1" ]; then
    >&2 echo "Error: host(s) missing"'!';
    >&2 echo "USAGE: $funcstack[1] REMOTE_HOST [TUNNEL_HOST|close]";
    return 1;
  fi
  # get parameters
  local remote_host="$1"
  # use always the same port for one remote host?
  local lport=`server_port $remote_host`
  command -v netstat >/dev/null 2>&1 || {
    echo >&2 "The netstat command cannot be found, please install it (e.g., sudo apt-get install net-tools)"
    return 1;
  }
  local open_connections="$( netstat -tlpn 2> /dev/null | grep ":$lport " | wc -l )"
  if [[ "$#" -lt "2" ]]; then
    if [[ "0" -lt "$open_connections" ]]; then
      # port not free
      >&2 echo "Open connection found (port $lport not free)"
      >&2 echo "Try closing: $funcstack[1] $remote_host close"
      return 1;
    else
      >&2 echo "Free port for the connect to $remote_host found: $lport"
      >&2 echo "Open connection using: $funcstack[1] $remote_host TUNNEL_HOST"
      return 1;
    fi
  else
    # get remote host configs
    local rhost="$(ssh -G $remote_host | grep '^hostname ' | cut -d' ' -f2)"
    local rport="$(ssh -G $remote_host | grep '^port ' | cut -d' ' -f2)"
    if [[ "$2" == "close" ]]; then
      if [[ "0" -eq "$open_connections" ]]; then
        >&2 echo "No open connection found (port $lport is free), cannot close a connection!"
        return 1
      fi

      echo "Trying to close tunnel to $remote_host from local port $lport of process $(pidgrep "ssh -f .* -L "$lport:$rhost:$rport" -N") ..."
      kill $(pidgrep "ssh -f .* -L "$lport:$rhost:$rport" -N")
    else
      if [[ "0" -lt "$open_connections" ]]; then
        >&2 echo "Open connection found (port $lport not free), try to close the connection first: $funcstack[1] $remote_host close"
        return 1
      fi
      local tunnel_host="$2"
      # open tunnel
      echo "Opening tunnel to $remote_host from local port $lport via $tunnel_host ..."
      ssh -f $tunnel_host -L "$lport:$rhost:$rport" -N || local ssh_error=1
      if [[ -n "$ssh_error" ]]; then 
        >&2 echo "Error! Unable to connect!"
        return 1
      fi
      echo "Tunnel opened!"

      # check local config:
      local configport="$(ssh -G __${remote_host} | grep '^port ' | cut -d' ' -f2)"
      if [[ "$configport" != "$lport" && "$configport" == "22" ]]; then
        echo "Invalid tunneled host config for __${remote_host}! Trying to fix the issue ..."
        add_tunneled_host $remote_host
      fi
      configport="$(ssh -G __${remote_host} | grep '^port ' | cut -d' ' -f2)"
      if [[ "$configport" == "$lport" ]]; then
        echo "Tunneled connection enabled via host: __${remote_host}"
      else
        >&2 echo "Error! Please try to update tunneled host config __${remote_host} from port $configport to $lport (see ssh config)"
        return 1
      fi
    fi
  fi
}

# Deprecated .. use __[hostname] representative to connect to tunneled host
tunnel_ssh() {
  if [ "$#" -le "1" ]; then
    >&2 echo "Error: host(s) missing"'!';
    >&2 echo "USAGE: $funcstack[1] TUNNEL_HOST REMOTE_HOST";
    return 1;
  fi
  # get parameters
  tunnel_host="$1"
  remote_host="$2"
  # use always the same port for one remote host?
  lport=`server_port $remote_host`
  if [ "0" -lt "$( netstat -tlpn 2> /dev/null | grep ":$lport " | wc -l )" ]; then
    # port not free
    echo "port $lport not free"
    >&2 echo "Error: port $lport not free"'!';
    return 1;
  else
    echo "free port to connect to $remote_host found: $lport"
  fi
  # pick a random port
  #while true ; do
  #  let "lport = $RANDOM % 10000 + 50000"
  #  if [ "0" -lt "$( netstat -tlpn 2> /dev/null | grep ":$lport " | wc -l )" ]; then
  #    # port not free
  #    echo "port $lport not free"
  #  else
  #    echo "free port found: $lport"
  #    break
  #  fi
  #done
  # get remote host configs
  rhost="$(ssh -G $remote_host | grep '^hostname ' | cut -d' ' -f2)"
  rport="$(ssh -G $remote_host | grep '^port ' | cut -d' ' -f2)"
  ruser="$(ssh -G $remote_host | grep '^user ' | cut -d' ' -f2)"
  # get first existing identity file
  ridentityfile="$(ssh -G $remote_host | grep '^identityfile ' | cut -d' ' -f2 | while read line ; do
    # eval path (i.e., ~/...)
    file=$(eval echo $line)
    if [ -e "$file" ] ; then
      echo "$file"
      break
    fi
  done)"
  # open tunnel
  ssh -f $tunnel_host -L "$lport:$rhost:$rport" -N
  # remote connection via tunnel
  if [ -n "$ridentityfile" ] ; then
    ssh -i $ridentityfile -p "$lport" -t "$ruser@localhost" 'tmux attach -d  2> /dev/null || tmux new'
  else
    ssh -p "$lport" -t "$ruser@localhost" 'tmux attach -d  2> /dev/null || tmux new'
  fi
  echo "trying to close tunnel to $tunnel_host from local port $lport of process $(pidgrep "ssh -f $1 -L "$lport:$rhost:$rport" -N") ..."
  kill $(pidgrep "ssh -f $1 -L "$lport:$rhost:$rport" -N")
}
_tunnel_ssh() { cur="${COMP_WORDS[COMP_CWORD]}"; if [ -f "$HOME/.ssh/config" ] ; then if [ "$COMP_CWORD" -lt "2" ]; then COMPREPLY=($(compgen -W "$(awk '$1=="Host" { print $2 }' $HOME/.ssh/config)" -- ${cur}) ); elif [ "$COMP_CWORD" -lt "3" ]; then COMPREPLY=($(compgen -W "$(awk '$1=="Host" { print $2 }' $HOME/.ssh/config)" -- ${cur}) ); fi; fi; return 0; }
#TODO complete -F _tunnel_ssh tunnel_ssh

# opening a sinlge port to a ssh host (same local port than on the remote machine)
tunnel_port() {
  if [ "$#" -lt "1" ]; then
    >&2 echo "Error: port (and host) missing"'!';
    >&2 echo "USAGE: $funcstack[1] LOCAL_PORT [TARGET_HOST [TARGET_PORT]]";
    return 1;
  fi

  # get parameters
  local local_port="$1"
  local host="$2"
  local port="${3:-$local_port}"
  local local_forward_str="${local_port}:localhost"
  local PROXY_PID=`pidgrep ssh -f -N -L ${local_forward_str}`
  if [ "$PROXY_PID" != "" ]; then
    echo "closing tunneled port $port (killing \"$(psgrep "ssh -f -N -L ${local_forward_str}" | cut -c66-)\" with PID $PROXY_PID) ..."
    kill $PROXY_PID
  else
    if [ "$#" -le "1" ]; then
      >&2 echo "Error: host missin
g to create a connection"'!';
      >&2 echo "USAGE: $funcstack[1] LOCAL_PORT TARGET_HOST [TARGET_PORT]";
      return 1;
    fi
    local forward_str="${local_forward_str}:${port}"
    echo "opening port $local_port to $host:$port ..."
    ssh -f -N -L "${forward_str}" $host
  fi
}
